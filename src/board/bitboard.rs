//! Contains a number of utility functions and constants for bitboard operations.

/// The 'A' file of the board.
pub const FILE_A: u64 = 0x80_80_80_80_80_80_80_80;
/// The 'B' file of the board.
pub const FILE_B: u64 = 0x40_40_40_40_40_40_40_40;
/// The 'C' file of the board.
pub const FILE_C: u64 = 0x20_20_20_20_20_20_20_20;
/// The 'D' file of the board.
pub const FILE_D: u64 = 0x10_10_10_10_10_10_10_10;
/// The 'E' file of the board.
pub const FILE_E: u64 = 0x08_08_08_08_08_08_08_08;
/// The 'F' file of the board.
pub const FILE_F: u64 = 0x04_04_04_04_04_04_04_04;
/// The 'G' file of the board.
pub const FILE_G: u64 = 0x02_02_02_02_02_02_02_02;
/// The 'H' file of the board.
pub const FILE_H: u64 = 0x01_01_01_01_01_01_01_01;
/// An array containing all 8 board file masks in order.
pub const FILES: [u64; 8] = [ FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H ];

/// Rank 1 of the board.
pub const RANK_1: u64 = 0xFF_00_00_00_00_00_00_00;
/// Rank 2 of the board.
pub const RANK_2: u64 = 0x00_FF_00_00_00_00_00_00;
/// Rank 3 of the board.
pub const RANK_3: u64 = 0x00_00_FF_00_00_00_00_00;
/// Rank 4 of the board.
pub const RANK_4: u64 = 0x00_00_00_FF_00_00_00_00;
/// Rank 5 of the board.
pub const RANK_5: u64 = 0x00_00_00_00_FF_00_00_00;
/// Rank 6 of the board.
pub const RANK_6: u64 = 0x00_00_00_00_00_FF_00_00;
/// Rank 7 of the board.
pub const RANK_7: u64 = 0x00_00_00_00_00_00_FF_00;
/// Rank 8 of the board.
pub const RANK_8: u64 = 0x00_00_00_00_00_00_00_FF;
/// An array containing all 8 board rank masks in order.
pub const RANKS: [u64; 8] = [ RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8 ];

/// An array containing the 8 directions and their shifts.
/// The order is up, down, left, right, up-left, up-right, down-left, down-right.
pub const SHIFT_DIRS: [i8; 8] = [-8, 8, -1, 1, -9, -7, 7, 9];

/// An array containing the 8 directions and their shift masks, used to avoid overflow or wrapping.
/// The order is up, down, left, right, up-left, up-right, down-left, down-right.
pub const SHIFT_MASKS: [u64; 8] = [
    !RANK_8,
    !RANK_1,
    !FILE_A,
    !FILE_H,
    !(RANK_8 | FILE_A),
    !(RANK_8 | FILE_H),
    !(RANK_1 | FILE_A),
    !(RANK_1 | FILE_H), ];

// Pre-calculated rays extending in each shift direction from a given spot in the board.
pub const SHIFT_RAYS: [[u64; 8]; 64] = [
    [ 0x0000000000000000, 0x0080808080808080, 0x0000000000000000, 0x7F00000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0040201008040201 ],
    [ 0x0000000000000000, 0x0040404040404040, 0x8000000000000000, 0x3F00000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0080000000000000, 0x0020100804020100 ],
    [ 0x0000000000000000, 0x0020202020202020, 0xC000000000000000, 0x1F00000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0040800000000000, 0x0010080402010000 ],
    [ 0x0000000000000000, 0x0010101010101010, 0xE000000000000000, 0x0F00000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0020408000000000, 0x0008040201000000 ],
    [ 0x0000000000000000, 0x0008080808080808, 0xF000000000000000, 0x0700000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0010204080000000, 0x0004020100000000 ],
    [ 0x0000000000000000, 0x0004040404040404, 0xF800000000000000, 0x0300000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0008102040800000, 0x0002010000000000 ],
    [ 0x0000000000000000, 0x0002020202020202, 0xFC00000000000000, 0x0100000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0004081020408000, 0x0001000000000000 ],
    [ 0x0000000000000000, 0x0001010101010101, 0xFE00000000000000, 0x0000000000000000,
      0x0000000000000000, 0x0000000000000000, 0x0002040810204080, 0x0000000000000000 ],
    [ 0x8000000000000000, 0x0000808080808080, 0x0000000000000000, 0x007F000000000000,
      0x0000000000000000, 0x4000000000000000, 0x0000000000000000, 0x0000402010080402 ],
    [ 0x4000000000000000, 0x0000404040404040, 0x0080000000000000, 0x003F000000000000,
      0x8000000000000000, 0x2000000000000000, 0x0000800000000000, 0x0000201008040201 ],
    [ 0x2000000000000000, 0x0000202020202020, 0x00C0000000000000, 0x001F000000000000,
      0x4000000000000000, 0x1000000000000000, 0x0000408000000000, 0x0000100804020100 ],
    [ 0x1000000000000000, 0x0000101010101010, 0x00E0000000000000, 0x000F000000000000,
      0x2000000000000000, 0x0800000000000000, 0x0000204080000000, 0x0000080402010000 ],
    [ 0x0800000000000000, 0x0000080808080808, 0x00F0000000000000, 0x0007000000000000,
      0x1000000000000000, 0x0400000000000000, 0x0000102040800000, 0x0000040201000000 ],
    [ 0x0400000000000000, 0x0000040404040404, 0x00F8000000000000, 0x0003000000000000,
      0x0800000000000000, 0x0200000000000000, 0x0000081020408000, 0x0000020100000000 ],
    [ 0x0200000000000000, 0x0000020202020202, 0x00FC000000000000, 0x0001000000000000,
      0x0400000000000000, 0x0100000000000000, 0x0000040810204080, 0x0000010000000000 ],
    [ 0x0100000000000000, 0x0000010101010101, 0x00FE000000000000, 0x0000000000000000,
      0x0200000000000000, 0x0000000000000000, 0x0000020408102040, 0x0000000000000000 ],
    [ 0x8080000000000000, 0x0000008080808080, 0x0000000000000000, 0x00007F0000000000,
      0x0000000000000000, 0x2040000000000000, 0x0000000000000000, 0x0000004020100804 ],
    [ 0x4040000000000000, 0x0000004040404040, 0x0000800000000000, 0x00003F0000000000,
      0x0080000000000000, 0x1020000000000000, 0x0000008000000000, 0x0000002010080402 ],
    [ 0x2020000000000000, 0x0000002020202020, 0x0000C00000000000, 0x00001F0000000000,
      0x8040000000000000, 0x0810000000000000, 0x0000004080000000, 0x0000001008040201 ],
    [ 0x1010000000000000, 0x0000001010101010, 0x0000E00000000000, 0x00000F0000000000,
      0x4020000000000000, 0x0408000000000000, 0x0000002040800000, 0x0000000804020100 ],
    [ 0x0808000000000000, 0x0000000808080808, 0x0000F00000000000, 0x0000070000000000,
      0x2010000000000000, 0x0204000000000000, 0x0000001020408000, 0x0000000402010000 ],
    [ 0x0404000000000000, 0x0000000404040404, 0x0000F80000000000, 0x0000030000000000,
      0x1008000000000000, 0x0102000000000000, 0x0000000810204080, 0x0000000201000000 ],
    [ 0x0202000000000000, 0x0000000202020202, 0x0000FC0000000000, 0x0000010000000000,
      0x0804000000000000, 0x0001000000000000, 0x0000000408102040, 0x0000000100000000 ],
    [ 0x0101000000000000, 0x0000000101010101, 0x0000FE0000000000, 0x0000000000000000,
      0x0402000000000000, 0x0000000000000000, 0x0000000204081020, 0x0000000000000000 ],
    [ 0x8080800000000000, 0x0000000080808080, 0x0000000000000000, 0x0000007F00000000,
      0x0000000000000000, 0x1020400000000000, 0x0000000000000000, 0x0000000040201008 ],
    [ 0x4040400000000000, 0x0000000040404040, 0x0000008000000000, 0x0000003F00000000,
      0x0000800000000000, 0x0810200000000000, 0x0000000080000000, 0x0000000020100804 ],
    [ 0x2020200000000000, 0x0000000020202020, 0x000000C000000000, 0x0000001F00000000,
      0x0080400000000000, 0x0408100000000000, 0x0000000040800000, 0x0000000010080402 ],
    [ 0x1010100000000000, 0x0000000010101010, 0x000000E000000000, 0x0000000F00000000,
      0x8040200000000000, 0x0204080000000000, 0x0000000020408000, 0x0000000008040201 ],
    [ 0x0808080000000000, 0x0000000008080808, 0x000000F000000000, 0x0000000700000000,
      0x4020100000000000, 0x0102040000000000, 0x0000000010204080, 0x0000000004020100 ],
    [ 0x0404040000000000, 0x0000000004040404, 0x000000F800000000, 0x0000000300000000,
      0x2010080000000000, 0x0001020000000000, 0x0000000008102040, 0x0000000002010000 ],
    [ 0x0202020000000000, 0x0000000002020202, 0x000000FC00000000, 0x0000000100000000,
      0x1008040000000000, 0x0000010000000000, 0x0000000004081020, 0x0000000001000000 ],
    [ 0x0101010000000000, 0x0000000001010101, 0x000000FE00000000, 0x0000000000000000,
      0x0804020000000000, 0x0000000000000000, 0x0000000002040810, 0x0000000000000000 ],
    [ 0x8080808000000000, 0x0000000000808080, 0x0000000000000000, 0x000000007F000000,
      0x0000000000000000, 0x0810204000000000, 0x0000000000000000, 0x0000000000402010 ],
    [ 0x4040404000000000, 0x0000000000404040, 0x0000000080000000, 0x000000003F000000,
      0x0000008000000000, 0x0408102000000000, 0x0000000000800000, 0x0000000000201008 ],
    [ 0x2020202000000000, 0x0000000000202020, 0x00000000C0000000, 0x000000001F000000,
      0x0000804000000000, 0x0204081000000000, 0x0000000000408000, 0x0000000000100804 ],
    [ 0x1010101000000000, 0x0000000000101010, 0x00000000E0000000, 0x000000000F000000,
      0x0080402000000000, 0x0102040800000000, 0x0000000000204080, 0x0000000000080402 ],
    [ 0x0808080800000000, 0x0000000000080808, 0x00000000F0000000, 0x0000000007000000,
      0x8040201000000000, 0x0001020400000000, 0x0000000000102040, 0x0000000000040201 ],
    [ 0x0404040400000000, 0x0000000000040404, 0x00000000F8000000, 0x0000000003000000,
      0x4020100800000000, 0x0000010200000000, 0x0000000000081020, 0x0000000000020100 ],
    [ 0x0202020200000000, 0x0000000000020202, 0x00000000FC000000, 0x0000000001000000,
      0x2010080400000000, 0x0000000100000000, 0x0000000000040810, 0x0000000000010000 ],
    [ 0x0101010100000000, 0x0000000000010101, 0x00000000FE000000, 0x0000000000000000,
      0x1008040200000000, 0x0000000000000000, 0x0000000000020408, 0x0000000000000000 ],
    [ 0x8080808080000000, 0x0000000000008080, 0x0000000000000000, 0x00000000007F0000,
      0x0000000000000000, 0x0408102040000000, 0x0000000000000000, 0x0000000000004020 ],
    [ 0x4040404040000000, 0x0000000000004040, 0x0000000000800000, 0x00000000003F0000,
      0x0000000080000000, 0x0204081020000000, 0x0000000000008000, 0x0000000000002010 ],
    [ 0x2020202020000000, 0x0000000000002020, 0x0000000000C00000, 0x00000000001F0000,
      0x0000008040000000, 0x0102040810000000, 0x0000000000004080, 0x0000000000001008 ],
    [ 0x1010101010000000, 0x0000000000001010, 0x0000000000E00000, 0x00000000000F0000,
      0x0000804020000000, 0x0001020408000000, 0x0000000000002040, 0x0000000000000804 ],
    [ 0x0808080808000000, 0x0000000000000808, 0x0000000000F00000, 0x0000000000070000,
      0x0080402010000000, 0x0000010204000000, 0x0000000000001020, 0x0000000000000402 ],
    [ 0x0404040404000000, 0x0000000000000404, 0x0000000000F80000, 0x0000000000030000,
      0x8040201008000000, 0x0000000102000000, 0x0000000000000810, 0x0000000000000201 ],
    [ 0x0202020202000000, 0x0000000000000202, 0x0000000000FC0000, 0x0000000000010000,
      0x4020100804000000, 0x0000000001000000, 0x0000000000000408, 0x0000000000000100 ],
    [ 0x0101010101000000, 0x0000000000000101, 0x0000000000FE0000, 0x0000000000000000,
      0x2010080402000000, 0x0000000000000000, 0x0000000000000204, 0x0000000000000000 ],
    [ 0x8080808080800000, 0x0000000000000080, 0x0000000000000000, 0x0000000000007F00,
      0x0000000000000000, 0x0204081020400000, 0x0000000000000000, 0x0000000000000040 ],
    [ 0x4040404040400000, 0x0000000000000040, 0x0000000000008000, 0x0000000000003F00,
      0x0000000000800000, 0x0102040810200000, 0x0000000000000080, 0x0000000000000020 ],
    [ 0x2020202020200000, 0x0000000000000020, 0x000000000000C000, 0x0000000000001F00,
      0x0000000080400000, 0x0001020408100000, 0x0000000000000040, 0x0000000000000010 ],
    [ 0x1010101010100000, 0x0000000000000010, 0x000000000000E000, 0x0000000000000F00,
      0x0000008040200000, 0x0000010204080000, 0x0000000000000020, 0x0000000000000008 ],
    [ 0x0808080808080000, 0x0000000000000008, 0x000000000000F000, 0x0000000000000700,
      0x0000804020100000, 0x0000000102040000, 0x0000000000000010, 0x0000000000000004 ],
    [ 0x0404040404040000, 0x0000000000000004, 0x000000000000F800, 0x0000000000000300,
      0x0080402010080000, 0x0000000001020000, 0x0000000000000008, 0x0000000000000002 ],
    [ 0x0202020202020000, 0x0000000000000002, 0x000000000000FC00, 0x0000000000000100,
      0x8040201008040000, 0x0000000000010000, 0x0000000000000004, 0x0000000000000001 ],
    [ 0x0101010101010000, 0x0000000000000001, 0x000000000000FE00, 0x0000000000000000,
      0x4020100804020000, 0x0000000000000000, 0x0000000000000002, 0x0000000000000000 ],
    [ 0x8080808080808000, 0x0000000000000000, 0x0000000000000000, 0x000000000000007F,
      0x0000000000000000, 0x0102040810204000, 0x0000000000000000, 0x0000000000000000 ],
    [ 0x4040404040404000, 0x0000000000000000, 0x0000000000000080, 0x000000000000003F,
      0x0000000000008000, 0x0001020408102000, 0x0000000000000000, 0x0000000000000000 ],
    [ 0x2020202020202000, 0x0000000000000000, 0x00000000000000C0, 0x000000000000001F,
      0x0000000000804000, 0x0000010204081000, 0x0000000000000000, 0x0000000000000000 ],
    [ 0x1010101010101000, 0x0000000000000000, 0x00000000000000E0, 0x000000000000000F,
      0x0000000080402000, 0x0000000102040800, 0x0000000000000000, 0x0000000000000000 ],
    [ 0x0808080808080800, 0x0000000000000000, 0x00000000000000F0, 0x0000000000000007,
      0x0000008040201000, 0x0000000001020400, 0x0000000000000000, 0x0000000000000000 ],
    [ 0x0404040404040400, 0x0000000000000000, 0x00000000000000F8, 0x0000000000000003,
      0x0000804020100800, 0x0000000000010200, 0x0000000000000000, 0x0000000000000000 ],
    [ 0x0202020202020200, 0x0000000000000000, 0x00000000000000FC, 0x0000000000000001,
      0x0080402010080400, 0x0000000000000100, 0x0000000000000000, 0x0000000000000000 ],
    [ 0x0101010101010100, 0x0000000000000000, 0x00000000000000FE, 0x0000000000000000,
      0x8040201008040200, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ],
];

/// A function which allows shifting a negative number of spots to the right.
/// # Arguments
/// * `x`: The number to shift.
/// * `shift`: The size of the shift, positive for right and negative for left.
pub fn directional_shift(x: u64, shift: i8) -> u64 {
    if shift < 0 {
        x << -shift
    } else {
        x >> shift
    }
}

/// A function which generates the moves in the specified direction using the given mask.
/// # Arguments:
/// * `player`: The bitboard representing the player's disks.
/// * `mask`: A bitmask containing the opponent's disks, excluding the wrapping locations.
/// * `dir`: The direction in which to shift (from SHIFT_DIRS).
pub fn directional_moves(player: u64, mask: u64, dir: i8) -> u64 {
    let mask_2 = mask & directional_shift(mask, dir);
    let mask_4 = mask_2 & directional_shift(mask_2, 2 * dir);

    let mut flip = player;
    flip |= mask & directional_shift(flip, dir);
    flip |= mask_2 & directional_shift(flip, dir * 2);
    flip |= mask_4 & directional_shift(flip, dir * 4);

    directional_shift(flip & mask, dir)
}

/// A function which generates all moves a given player can make against the given opponent.
/// # Arguments:
/// * `player`: The bitboard representing the player's disks.
/// * `opponent`: The bitboard representing the opponent's disks.
pub fn all_moves(player: u64, opponent: u64) -> u64 {
    let mut all_moves: u64 = 0;

    for i in 0..SHIFT_DIRS.len() {
        let shift = SHIFT_DIRS[i];
        let mask = SHIFT_MASKS[i];
        all_moves |= directional_moves(player, opponent & mask, shift);
    }

    all_moves & !(player | opponent)
}

mod test {
    #[test]
    fn test_directional_shift() {
        let x = 0x00_00_00_13_57_00_00_00;

        assert_eq!(super::directional_shift(x,  1), x >> 1);
        assert_eq!(super::directional_shift(x, -1), x << 1);
    }

    #[test]
    fn test_directional_moves() {
        let player = 0x00_0C_04_04_86_04_02_00;
        let opponent = 0x38_01_FB_7B_39_1B_1D_3C;

        let results: [u64; 8] = [
            0x00_02_02_00_02_00_00_00, 0x00_00_00_08_08_08_0A_0C,
            0x00_00_F0_F6_70_30_38_00, 0x00_00_01_01_00_01_00_00,
            0x00_72_30_10_00_00_00_00, 0x00_11_21_00_00_00_00_00,
            0x00_00_00_30_70_72_34_38, 0x00_00_00_01_01_00_01_00 ];

        let tests: Vec<(i8, u64, u64)> = (0..8).map(|i| (
            super::SHIFT_DIRS[i], super::SHIFT_MASKS[i], results[i])
        ).collect();

        for (shift, mask, result) in tests {
            assert_eq!(super::directional_moves(player, opponent & mask, shift), result);
        }
    }

    #[test]
    fn test_all_moves() {
        let player = 0x00_0C_04_04_86_04_02_00;
        let opponent = 0x38_01_FB_7B_39_1B_1D_3C;

        assert_eq!(super::all_moves(player, opponent), 0x00_72_00_80_40_60_20_00);
    }
}
