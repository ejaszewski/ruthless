/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

//! Contains a number of utility functions and constants for bitboard operations.
#[cfg(all(target_arch="x86", target_feature="bmi2"))]
use std::arch::x86::{ _pext_u32, _pdep_u32 };

#[cfg(all(target_arch="x86_64", target_feature="bmi2"))]
use std::arch::x86_64::{ _pext_u64, _pdep_u64 };

/// The 'A' file of the board.
pub const FILE_A: u64 = 0x80_80_80_80_80_80_80_80;
/// The 'B' file of the board.
pub const FILE_B: u64 = 0x40_40_40_40_40_40_40_40;
/// The 'C' file of the board.
pub const FILE_C: u64 = 0x20_20_20_20_20_20_20_20;
/// The 'D' file of the board.
pub const FILE_D: u64 = 0x10_10_10_10_10_10_10_10;
/// The 'E' file of the board.
pub const FILE_E: u64 = 0x08_08_08_08_08_08_08_08;
/// The 'F' file of the board.
pub const FILE_F: u64 = 0x04_04_04_04_04_04_04_04;
/// The 'G' file of the board.
pub const FILE_G: u64 = 0x02_02_02_02_02_02_02_02;
/// The 'H' file of the board.
pub const FILE_H: u64 = 0x01_01_01_01_01_01_01_01;
/// An array containing all 8 board file masks in order.
pub const FILES: [u64; 8] = [ FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H ];

/// Rank 1 of the board.
pub const RANK_1: u64 = 0xFF_00_00_00_00_00_00_00;
/// Rank 2 of the board.
pub const RANK_2: u64 = 0x00_FF_00_00_00_00_00_00;
/// Rank 3 of the board.
pub const RANK_3: u64 = 0x00_00_FF_00_00_00_00_00;
/// Rank 4 of the board.
pub const RANK_4: u64 = 0x00_00_00_FF_00_00_00_00;
/// Rank 5 of the board.
pub const RANK_5: u64 = 0x00_00_00_00_FF_00_00_00;
/// Rank 6 of the board.
pub const RANK_6: u64 = 0x00_00_00_00_00_FF_00_00;
/// Rank 7 of the board.
pub const RANK_7: u64 = 0x00_00_00_00_00_00_FF_00;
/// Rank 8 of the board.
pub const RANK_8: u64 = 0x00_00_00_00_00_00_00_FF;
/// An array containing all 8 board rank masks in order.
pub const RANKS: [u64; 8] = [ RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8 ];

/// An array containing the 8 directions and their shifts.
/// The order is up, down, left, right, up-left, up-right, down-left, down-right.
pub const SHIFT_DIRS: [i8; 8] = [-8, 8, -1, 1, -9, -7, 7, 9];

/// An array containing the 8 directions and their shift masks, used to avoid overflow or wrapping.
/// The order is up, down, left, right, up-left, up-right, down-left, down-right.
pub const SHIFT_MASKS: [u64; 8] = [
    !RANK_1,
    !RANK_8,
    !FILE_A,
    !FILE_H,
    !(RANK_1 | FILE_A),
    !(RANK_1 | FILE_H),
    !(RANK_8 | FILE_A),
    !(RANK_8 | FILE_H)
];

/// Pre-calculated rays extending in each shift direction from a given spot in the board.
pub const SHIFT_RAYS: [[u64; 8]; 64] = [
    [ 0x00_00_00_00_00_00_00_00, 0x00_80_80_80_80_80_80_80, 0x00_00_00_00_00_00_00_00, 0x7F_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_40_20_10_08_04_02_01 ],
    [ 0x00_00_00_00_00_00_00_00, 0x00_40_40_40_40_40_40_40, 0x80_00_00_00_00_00_00_00, 0x3F_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_80_00_00_00_00_00_00, 0x00_20_10_08_04_02_01_00 ],
    [ 0x00_00_00_00_00_00_00_00, 0x00_20_20_20_20_20_20_20, 0xC0_00_00_00_00_00_00_00, 0x1F_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_40_80_00_00_00_00_00, 0x00_10_08_04_02_01_00_00 ],
    [ 0x00_00_00_00_00_00_00_00, 0x00_10_10_10_10_10_10_10, 0xE0_00_00_00_00_00_00_00, 0x0F_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_20_40_80_00_00_00_00, 0x00_08_04_02_01_00_00_00 ],
    [ 0x00_00_00_00_00_00_00_00, 0x00_08_08_08_08_08_08_08, 0xF0_00_00_00_00_00_00_00, 0x07_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_10_20_40_80_00_00_00, 0x00_04_02_01_00_00_00_00 ],
    [ 0x00_00_00_00_00_00_00_00, 0x00_04_04_04_04_04_04_04, 0xF8_00_00_00_00_00_00_00, 0x03_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_08_10_20_40_80_00_00, 0x00_02_01_00_00_00_00_00 ],
    [ 0x00_00_00_00_00_00_00_00, 0x00_02_02_02_02_02_02_02, 0xFC_00_00_00_00_00_00_00, 0x01_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_04_08_10_20_40_80_00, 0x00_01_00_00_00_00_00_00 ],
    [ 0x00_00_00_00_00_00_00_00, 0x00_01_01_01_01_01_01_01, 0xFE_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_02_04_08_10_20_40_80, 0x00_00_00_00_00_00_00_00 ],
    [ 0x80_00_00_00_00_00_00_00, 0x00_00_80_80_80_80_80_80, 0x00_00_00_00_00_00_00_00, 0x00_7F_00_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x40_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_40_20_10_08_04_02 ],
    [ 0x40_00_00_00_00_00_00_00, 0x00_00_40_40_40_40_40_40, 0x00_80_00_00_00_00_00_00, 0x00_3F_00_00_00_00_00_00,
      0x80_00_00_00_00_00_00_00, 0x20_00_00_00_00_00_00_00, 0x00_00_80_00_00_00_00_00, 0x00_00_20_10_08_04_02_01 ],
    [ 0x20_00_00_00_00_00_00_00, 0x00_00_20_20_20_20_20_20, 0x00_C0_00_00_00_00_00_00, 0x00_1F_00_00_00_00_00_00,
      0x40_00_00_00_00_00_00_00, 0x10_00_00_00_00_00_00_00, 0x00_00_40_80_00_00_00_00, 0x00_00_10_08_04_02_01_00 ],
    [ 0x10_00_00_00_00_00_00_00, 0x00_00_10_10_10_10_10_10, 0x00_E0_00_00_00_00_00_00, 0x00_0F_00_00_00_00_00_00,
      0x20_00_00_00_00_00_00_00, 0x08_00_00_00_00_00_00_00, 0x00_00_20_40_80_00_00_00, 0x00_00_08_04_02_01_00_00 ],
    [ 0x08_00_00_00_00_00_00_00, 0x00_00_08_08_08_08_08_08, 0x00_F0_00_00_00_00_00_00, 0x00_07_00_00_00_00_00_00,
      0x10_00_00_00_00_00_00_00, 0x04_00_00_00_00_00_00_00, 0x00_00_10_20_40_80_00_00, 0x00_00_04_02_01_00_00_00 ],
    [ 0x04_00_00_00_00_00_00_00, 0x00_00_04_04_04_04_04_04, 0x00_F8_00_00_00_00_00_00, 0x00_03_00_00_00_00_00_00,
      0x08_00_00_00_00_00_00_00, 0x02_00_00_00_00_00_00_00, 0x00_00_08_10_20_40_80_00, 0x00_00_02_01_00_00_00_00 ],
    [ 0x02_00_00_00_00_00_00_00, 0x00_00_02_02_02_02_02_02, 0x00_FC_00_00_00_00_00_00, 0x00_01_00_00_00_00_00_00,
      0x04_00_00_00_00_00_00_00, 0x01_00_00_00_00_00_00_00, 0x00_00_04_08_10_20_40_80, 0x00_00_01_00_00_00_00_00 ],
    [ 0x01_00_00_00_00_00_00_00, 0x00_00_01_01_01_01_01_01, 0x00_FE_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00,
      0x02_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_02_04_08_10_20_40, 0x00_00_00_00_00_00_00_00 ],
    [ 0x80_80_00_00_00_00_00_00, 0x00_00_00_80_80_80_80_80, 0x00_00_00_00_00_00_00_00, 0x00_00_7F_00_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x20_40_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_40_20_10_08_04 ],
    [ 0x40_40_00_00_00_00_00_00, 0x00_00_00_40_40_40_40_40, 0x00_00_80_00_00_00_00_00, 0x00_00_3F_00_00_00_00_00,
      0x00_80_00_00_00_00_00_00, 0x10_20_00_00_00_00_00_00, 0x00_00_00_80_00_00_00_00, 0x00_00_00_20_10_08_04_02 ],
    [ 0x20_20_00_00_00_00_00_00, 0x00_00_00_20_20_20_20_20, 0x00_00_C0_00_00_00_00_00, 0x00_00_1F_00_00_00_00_00,
      0x80_40_00_00_00_00_00_00, 0x08_10_00_00_00_00_00_00, 0x00_00_00_40_80_00_00_00, 0x00_00_00_10_08_04_02_01 ],
    [ 0x10_10_00_00_00_00_00_00, 0x00_00_00_10_10_10_10_10, 0x00_00_E0_00_00_00_00_00, 0x00_00_0F_00_00_00_00_00,
      0x40_20_00_00_00_00_00_00, 0x04_08_00_00_00_00_00_00, 0x00_00_00_20_40_80_00_00, 0x00_00_00_08_04_02_01_00 ],
    [ 0x08_08_00_00_00_00_00_00, 0x00_00_00_08_08_08_08_08, 0x00_00_F0_00_00_00_00_00, 0x00_00_07_00_00_00_00_00,
      0x20_10_00_00_00_00_00_00, 0x02_04_00_00_00_00_00_00, 0x00_00_00_10_20_40_80_00, 0x00_00_00_04_02_01_00_00 ],
    [ 0x04_04_00_00_00_00_00_00, 0x00_00_00_04_04_04_04_04, 0x00_00_F8_00_00_00_00_00, 0x00_00_03_00_00_00_00_00,
      0x10_08_00_00_00_00_00_00, 0x01_02_00_00_00_00_00_00, 0x00_00_00_08_10_20_40_80, 0x00_00_00_02_01_00_00_00 ],
    [ 0x02_02_00_00_00_00_00_00, 0x00_00_00_02_02_02_02_02, 0x00_00_FC_00_00_00_00_00, 0x00_00_01_00_00_00_00_00,
      0x08_04_00_00_00_00_00_00, 0x00_01_00_00_00_00_00_00, 0x00_00_00_04_08_10_20_40, 0x00_00_00_01_00_00_00_00 ],
    [ 0x01_01_00_00_00_00_00_00, 0x00_00_00_01_01_01_01_01, 0x00_00_FE_00_00_00_00_00, 0x00_00_00_00_00_00_00_00,
      0x04_02_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_02_04_08_10_20, 0x00_00_00_00_00_00_00_00 ],
    [ 0x80_80_80_00_00_00_00_00, 0x00_00_00_00_80_80_80_80, 0x00_00_00_00_00_00_00_00, 0x00_00_00_7F_00_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x10_20_40_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_40_20_10_08 ],
    [ 0x40_40_40_00_00_00_00_00, 0x00_00_00_00_40_40_40_40, 0x00_00_00_80_00_00_00_00, 0x00_00_00_3F_00_00_00_00,
      0x00_00_80_00_00_00_00_00, 0x08_10_20_00_00_00_00_00, 0x00_00_00_00_80_00_00_00, 0x00_00_00_00_20_10_08_04 ],
    [ 0x20_20_20_00_00_00_00_00, 0x00_00_00_00_20_20_20_20, 0x00_00_00_C0_00_00_00_00, 0x00_00_00_1F_00_00_00_00,
      0x00_80_40_00_00_00_00_00, 0x04_08_10_00_00_00_00_00, 0x00_00_00_00_40_80_00_00, 0x00_00_00_00_10_08_04_02 ],
    [ 0x10_10_10_00_00_00_00_00, 0x00_00_00_00_10_10_10_10, 0x00_00_00_E0_00_00_00_00, 0x00_00_00_0F_00_00_00_00,
      0x80_40_20_00_00_00_00_00, 0x02_04_08_00_00_00_00_00, 0x00_00_00_00_20_40_80_00, 0x00_00_00_00_08_04_02_01 ],
    [ 0x08_08_08_00_00_00_00_00, 0x00_00_00_00_08_08_08_08, 0x00_00_00_F0_00_00_00_00, 0x00_00_00_07_00_00_00_00,
      0x40_20_10_00_00_00_00_00, 0x01_02_04_00_00_00_00_00, 0x00_00_00_00_10_20_40_80, 0x00_00_00_00_04_02_01_00 ],
    [ 0x04_04_04_00_00_00_00_00, 0x00_00_00_00_04_04_04_04, 0x00_00_00_F8_00_00_00_00, 0x00_00_00_03_00_00_00_00,
      0x20_10_08_00_00_00_00_00, 0x00_01_02_00_00_00_00_00, 0x00_00_00_00_08_10_20_40, 0x00_00_00_00_02_01_00_00 ],
    [ 0x02_02_02_00_00_00_00_00, 0x00_00_00_00_02_02_02_02, 0x00_00_00_FC_00_00_00_00, 0x00_00_00_01_00_00_00_00,
      0x10_08_04_00_00_00_00_00, 0x00_00_01_00_00_00_00_00, 0x00_00_00_00_04_08_10_20, 0x00_00_00_00_01_00_00_00 ],
    [ 0x01_01_01_00_00_00_00_00, 0x00_00_00_00_01_01_01_01, 0x00_00_00_FE_00_00_00_00, 0x00_00_00_00_00_00_00_00,
      0x08_04_02_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_02_04_08_10, 0x00_00_00_00_00_00_00_00 ],
    [ 0x80_80_80_80_00_00_00_00, 0x00_00_00_00_00_80_80_80, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_7F_00_00_00,
      0x00_00_00_00_00_00_00_00, 0x08_10_20_40_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_40_20_10 ],
    [ 0x40_40_40_40_00_00_00_00, 0x00_00_00_00_00_40_40_40, 0x00_00_00_00_80_00_00_00, 0x00_00_00_00_3F_00_00_00,
      0x00_00_00_80_00_00_00_00, 0x04_08_10_20_00_00_00_00, 0x00_00_00_00_00_80_00_00, 0x00_00_00_00_00_20_10_08 ],
    [ 0x20_20_20_20_00_00_00_00, 0x00_00_00_00_00_20_20_20, 0x00_00_00_00_C0_00_00_00, 0x00_00_00_00_1F_00_00_00,
      0x00_00_80_40_00_00_00_00, 0x02_04_08_10_00_00_00_00, 0x00_00_00_00_00_40_80_00, 0x00_00_00_00_00_10_08_04 ],
    [ 0x10_10_10_10_00_00_00_00, 0x00_00_00_00_00_10_10_10, 0x00_00_00_00_E0_00_00_00, 0x00_00_00_00_0F_00_00_00,
      0x00_80_40_20_00_00_00_00, 0x01_02_04_08_00_00_00_00, 0x00_00_00_00_00_20_40_80, 0x00_00_00_00_00_08_04_02 ],
    [ 0x08_08_08_08_00_00_00_00, 0x00_00_00_00_00_08_08_08, 0x00_00_00_00_F0_00_00_00, 0x00_00_00_00_07_00_00_00,
      0x80_40_20_10_00_00_00_00, 0x00_01_02_04_00_00_00_00, 0x00_00_00_00_00_10_20_40, 0x00_00_00_00_00_04_02_01 ],
    [ 0x04_04_04_04_00_00_00_00, 0x00_00_00_00_00_04_04_04, 0x00_00_00_00_F8_00_00_00, 0x00_00_00_00_03_00_00_00,
      0x40_20_10_08_00_00_00_00, 0x00_00_01_02_00_00_00_00, 0x00_00_00_00_00_08_10_20, 0x00_00_00_00_00_02_01_00 ],
    [ 0x02_02_02_02_00_00_00_00, 0x00_00_00_00_00_02_02_02, 0x00_00_00_00_FC_00_00_00, 0x00_00_00_00_01_00_00_00,
      0x20_10_08_04_00_00_00_00, 0x00_00_00_01_00_00_00_00, 0x00_00_00_00_00_04_08_10, 0x00_00_00_00_00_01_00_00 ],
    [ 0x01_01_01_01_00_00_00_00, 0x00_00_00_00_00_01_01_01, 0x00_00_00_00_FE_00_00_00, 0x00_00_00_00_00_00_00_00,
      0x10_08_04_02_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_02_04_08, 0x00_00_00_00_00_00_00_00 ],
    [ 0x80_80_80_80_80_00_00_00, 0x00_00_00_00_00_00_80_80, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_7F_00_00,
      0x00_00_00_00_00_00_00_00, 0x04_08_10_20_40_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_40_20 ],
    [ 0x40_40_40_40_40_00_00_00, 0x00_00_00_00_00_00_40_40, 0x00_00_00_00_00_80_00_00, 0x00_00_00_00_00_3F_00_00,
      0x00_00_00_00_80_00_00_00, 0x02_04_08_10_20_00_00_00, 0x00_00_00_00_00_00_80_00, 0x00_00_00_00_00_00_20_10 ],
    [ 0x20_20_20_20_20_00_00_00, 0x00_00_00_00_00_00_20_20, 0x00_00_00_00_00_C0_00_00, 0x00_00_00_00_00_1F_00_00,
      0x00_00_00_80_40_00_00_00, 0x01_02_04_08_10_00_00_00, 0x00_00_00_00_00_00_40_80, 0x00_00_00_00_00_00_10_08 ],
    [ 0x10_10_10_10_10_00_00_00, 0x00_00_00_00_00_00_10_10, 0x00_00_00_00_00_E0_00_00, 0x00_00_00_00_00_0F_00_00,
      0x00_00_80_40_20_00_00_00, 0x00_01_02_04_08_00_00_00, 0x00_00_00_00_00_00_20_40, 0x00_00_00_00_00_00_08_04 ],
    [ 0x08_08_08_08_08_00_00_00, 0x00_00_00_00_00_00_08_08, 0x00_00_00_00_00_F0_00_00, 0x00_00_00_00_00_07_00_00,
      0x00_80_40_20_10_00_00_00, 0x00_00_01_02_04_00_00_00, 0x00_00_00_00_00_00_10_20, 0x00_00_00_00_00_00_04_02 ],
    [ 0x04_04_04_04_04_00_00_00, 0x00_00_00_00_00_00_04_04, 0x00_00_00_00_00_F8_00_00, 0x00_00_00_00_00_03_00_00,
      0x80_40_20_10_08_00_00_00, 0x00_00_00_01_02_00_00_00, 0x00_00_00_00_00_00_08_10, 0x00_00_00_00_00_00_02_01 ],
    [ 0x02_02_02_02_02_00_00_00, 0x00_00_00_00_00_00_02_02, 0x00_00_00_00_00_FC_00_00, 0x00_00_00_00_00_01_00_00,
      0x40_20_10_08_04_00_00_00, 0x00_00_00_00_01_00_00_00, 0x00_00_00_00_00_00_04_08, 0x00_00_00_00_00_00_01_00 ],
    [ 0x01_01_01_01_01_00_00_00, 0x00_00_00_00_00_00_01_01, 0x00_00_00_00_00_FE_00_00, 0x00_00_00_00_00_00_00_00,
      0x20_10_08_04_02_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_02_04, 0x00_00_00_00_00_00_00_00 ],
    [ 0x80_80_80_80_80_80_00_00, 0x00_00_00_00_00_00_00_80, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_7F_00,
      0x00_00_00_00_00_00_00_00, 0x02_04_08_10_20_40_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_40 ],
    [ 0x40_40_40_40_40_40_00_00, 0x00_00_00_00_00_00_00_40, 0x00_00_00_00_00_00_80_00, 0x00_00_00_00_00_00_3F_00,
      0x00_00_00_00_00_80_00_00, 0x01_02_04_08_10_20_00_00, 0x00_00_00_00_00_00_00_80, 0x00_00_00_00_00_00_00_20 ],
    [ 0x20_20_20_20_20_20_00_00, 0x00_00_00_00_00_00_00_20, 0x00_00_00_00_00_00_C0_00, 0x00_00_00_00_00_00_1F_00,
      0x00_00_00_00_80_40_00_00, 0x00_01_02_04_08_10_00_00, 0x00_00_00_00_00_00_00_40, 0x00_00_00_00_00_00_00_10 ],
    [ 0x10_10_10_10_10_10_00_00, 0x00_00_00_00_00_00_00_10, 0x00_00_00_00_00_00_E0_00, 0x00_00_00_00_00_00_0F_00,
      0x00_00_00_80_40_20_00_00, 0x00_00_01_02_04_08_00_00, 0x00_00_00_00_00_00_00_20, 0x00_00_00_00_00_00_00_08 ],
    [ 0x08_08_08_08_08_08_00_00, 0x00_00_00_00_00_00_00_08, 0x00_00_00_00_00_00_F0_00, 0x00_00_00_00_00_00_07_00,
      0x00_00_80_40_20_10_00_00, 0x00_00_00_01_02_04_00_00, 0x00_00_00_00_00_00_00_10, 0x00_00_00_00_00_00_00_04 ],
    [ 0x04_04_04_04_04_04_00_00, 0x00_00_00_00_00_00_00_04, 0x00_00_00_00_00_00_F8_00, 0x00_00_00_00_00_00_03_00,
      0x00_80_40_20_10_08_00_00, 0x00_00_00_00_01_02_00_00, 0x00_00_00_00_00_00_00_08, 0x00_00_00_00_00_00_00_02 ],
    [ 0x02_02_02_02_02_02_00_00, 0x00_00_00_00_00_00_00_02, 0x00_00_00_00_00_00_FC_00, 0x00_00_00_00_00_00_01_00,
      0x80_40_20_10_08_04_00_00, 0x00_00_00_00_00_01_00_00, 0x00_00_00_00_00_00_00_04, 0x00_00_00_00_00_00_00_01 ],
    [ 0x01_01_01_01_01_01_00_00, 0x00_00_00_00_00_00_00_01, 0x00_00_00_00_00_00_FE_00, 0x00_00_00_00_00_00_00_00,
      0x40_20_10_08_04_02_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_02, 0x00_00_00_00_00_00_00_00 ],
    [ 0x80_80_80_80_80_80_80_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_7F,
      0x00_00_00_00_00_00_00_00, 0x01_02_04_08_10_20_40_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
    [ 0x40_40_40_40_40_40_40_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_80, 0x00_00_00_00_00_00_00_3F,
      0x00_00_00_00_00_00_80_00, 0x00_01_02_04_08_10_20_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
    [ 0x20_20_20_20_20_20_20_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_C0, 0x00_00_00_00_00_00_00_1F,
      0x00_00_00_00_00_80_40_00, 0x00_00_01_02_04_08_10_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
    [ 0x10_10_10_10_10_10_10_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_E0, 0x00_00_00_00_00_00_00_0F,
      0x00_00_00_00_80_40_20_00, 0x00_00_00_01_02_04_08_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
    [ 0x08_08_08_08_08_08_08_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_F0, 0x00_00_00_00_00_00_00_07,
      0x00_00_00_80_40_20_10_00, 0x00_00_00_00_01_02_04_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
    [ 0x04_04_04_04_04_04_04_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_F8, 0x00_00_00_00_00_00_00_03,
      0x00_00_80_40_20_10_08_00, 0x00_00_00_00_00_01_02_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
    [ 0x02_02_02_02_02_02_02_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_FC, 0x00_00_00_00_00_00_00_01,
      0x00_80_40_20_10_08_04_00, 0x00_00_00_00_00_00_01_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
    [ 0x01_01_01_01_01_01_01_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_FE, 0x00_00_00_00_00_00_00_00,
      0x80_40_20_10_08_04_02_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00, 0x00_00_00_00_00_00_00_00 ],
];

/// Rays which are used by the PEXT/PDEP move making function.
pub const EXTRACT_RAYS: [[u64; 4]; 64] = [
    [0xff_00_00_00_00_00_00_00, 0x80_80_80_80_80_80_80_80, 0x80_40_20_10_08_04_02_01, 0x80_00_00_00_00_00_00_00],
    [0xff_00_00_00_00_00_00_00, 0x40_40_40_40_40_40_40_40, 0x40_20_10_08_04_02_01_00, 0x40_80_00_00_00_00_00_00],
    [0xff_00_00_00_00_00_00_00, 0x20_20_20_20_20_20_20_20, 0x20_10_08_04_02_01_00_00, 0x20_40_80_00_00_00_00_00],
    [0xff_00_00_00_00_00_00_00, 0x10_10_10_10_10_10_10_10, 0x10_08_04_02_01_00_00_00, 0x10_20_40_80_00_00_00_00],
    [0xff_00_00_00_00_00_00_00, 0x08_08_08_08_08_08_08_08, 0x08_04_02_01_00_00_00_00, 0x08_10_20_40_80_00_00_00],
    [0xff_00_00_00_00_00_00_00, 0x04_04_04_04_04_04_04_04, 0x04_02_01_00_00_00_00_00, 0x04_08_10_20_40_80_00_00],
    [0xff_00_00_00_00_00_00_00, 0x02_02_02_02_02_02_02_02, 0x02_01_00_00_00_00_00_00, 0x02_04_08_10_20_40_80_00],
    [0xff_00_00_00_00_00_00_00, 0x01_01_01_01_01_01_01_01, 0x01_00_00_00_00_00_00_00, 0x01_02_04_08_10_20_40_80],
    [0x00_ff_00_00_00_00_00_00, 0x80_80_80_80_80_80_80_80, 0x00_80_40_20_10_08_04_02, 0x40_80_00_00_00_00_00_00],
    [0x00_ff_00_00_00_00_00_00, 0x40_40_40_40_40_40_40_40, 0x80_40_20_10_08_04_02_01, 0x20_40_80_00_00_00_00_00],
    [0x00_ff_00_00_00_00_00_00, 0x20_20_20_20_20_20_20_20, 0x40_20_10_08_04_02_01_00, 0x10_20_40_80_00_00_00_00],
    [0x00_ff_00_00_00_00_00_00, 0x10_10_10_10_10_10_10_10, 0x20_10_08_04_02_01_00_00, 0x08_10_20_40_80_00_00_00],
    [0x00_ff_00_00_00_00_00_00, 0x08_08_08_08_08_08_08_08, 0x10_08_04_02_01_00_00_00, 0x04_08_10_20_40_80_00_00],
    [0x00_ff_00_00_00_00_00_00, 0x04_04_04_04_04_04_04_04, 0x08_04_02_01_00_00_00_00, 0x02_04_08_10_20_40_80_00],
    [0x00_ff_00_00_00_00_00_00, 0x02_02_02_02_02_02_02_02, 0x04_02_01_00_00_00_00_00, 0x01_02_04_08_10_20_40_80],
    [0x00_ff_00_00_00_00_00_00, 0x01_01_01_01_01_01_01_01, 0x02_01_00_00_00_00_00_00, 0x00_01_02_04_08_10_20_40],
    [0x00_00_ff_00_00_00_00_00, 0x80_80_80_80_80_80_80_80, 0x00_00_80_40_20_10_08_04, 0x20_40_80_00_00_00_00_00],
    [0x00_00_ff_00_00_00_00_00, 0x40_40_40_40_40_40_40_40, 0x00_80_40_20_10_08_04_02, 0x10_20_40_80_00_00_00_00],
    [0x00_00_ff_00_00_00_00_00, 0x20_20_20_20_20_20_20_20, 0x80_40_20_10_08_04_02_01, 0x08_10_20_40_80_00_00_00],
    [0x00_00_ff_00_00_00_00_00, 0x10_10_10_10_10_10_10_10, 0x40_20_10_08_04_02_01_00, 0x04_08_10_20_40_80_00_00],
    [0x00_00_ff_00_00_00_00_00, 0x08_08_08_08_08_08_08_08, 0x20_10_08_04_02_01_00_00, 0x02_04_08_10_20_40_80_00],
    [0x00_00_ff_00_00_00_00_00, 0x04_04_04_04_04_04_04_04, 0x10_08_04_02_01_00_00_00, 0x01_02_04_08_10_20_40_80],
    [0x00_00_ff_00_00_00_00_00, 0x02_02_02_02_02_02_02_02, 0x08_04_02_01_00_00_00_00, 0x00_01_02_04_08_10_20_40],
    [0x00_00_ff_00_00_00_00_00, 0x01_01_01_01_01_01_01_01, 0x04_02_01_00_00_00_00_00, 0x00_00_01_02_04_08_10_20],
    [0x00_00_00_ff_00_00_00_00, 0x80_80_80_80_80_80_80_80, 0x00_00_00_80_40_20_10_08, 0x10_20_40_80_00_00_00_00],
    [0x00_00_00_ff_00_00_00_00, 0x40_40_40_40_40_40_40_40, 0x00_00_80_40_20_10_08_04, 0x08_10_20_40_80_00_00_00],
    [0x00_00_00_ff_00_00_00_00, 0x20_20_20_20_20_20_20_20, 0x00_80_40_20_10_08_04_02, 0x04_08_10_20_40_80_00_00],
    [0x00_00_00_ff_00_00_00_00, 0x10_10_10_10_10_10_10_10, 0x80_40_20_10_08_04_02_01, 0x02_04_08_10_20_40_80_00],
    [0x00_00_00_ff_00_00_00_00, 0x08_08_08_08_08_08_08_08, 0x40_20_10_08_04_02_01_00, 0x01_02_04_08_10_20_40_80],
    [0x00_00_00_ff_00_00_00_00, 0x04_04_04_04_04_04_04_04, 0x20_10_08_04_02_01_00_00, 0x00_01_02_04_08_10_20_40],
    [0x00_00_00_ff_00_00_00_00, 0x02_02_02_02_02_02_02_02, 0x10_08_04_02_01_00_00_00, 0x00_00_01_02_04_08_10_20],
    [0x00_00_00_ff_00_00_00_00, 0x01_01_01_01_01_01_01_01, 0x08_04_02_01_00_00_00_00, 0x00_00_00_01_02_04_08_10],
    [0x00_00_00_00_ff_00_00_00, 0x80_80_80_80_80_80_80_80, 0x00_00_00_00_80_40_20_10, 0x08_10_20_40_80_00_00_00],
    [0x00_00_00_00_ff_00_00_00, 0x40_40_40_40_40_40_40_40, 0x00_00_00_80_40_20_10_08, 0x04_08_10_20_40_80_00_00],
    [0x00_00_00_00_ff_00_00_00, 0x20_20_20_20_20_20_20_20, 0x00_00_80_40_20_10_08_04, 0x02_04_08_10_20_40_80_00],
    [0x00_00_00_00_ff_00_00_00, 0x10_10_10_10_10_10_10_10, 0x00_80_40_20_10_08_04_02, 0x01_02_04_08_10_20_40_80],
    [0x00_00_00_00_ff_00_00_00, 0x08_08_08_08_08_08_08_08, 0x80_40_20_10_08_04_02_01, 0x00_01_02_04_08_10_20_40],
    [0x00_00_00_00_ff_00_00_00, 0x04_04_04_04_04_04_04_04, 0x40_20_10_08_04_02_01_00, 0x00_00_01_02_04_08_10_20],
    [0x00_00_00_00_ff_00_00_00, 0x02_02_02_02_02_02_02_02, 0x20_10_08_04_02_01_00_00, 0x00_00_00_01_02_04_08_10],
    [0x00_00_00_00_ff_00_00_00, 0x01_01_01_01_01_01_01_01, 0x10_08_04_02_01_00_00_00, 0x00_00_00_00_01_02_04_08],
    [0x00_00_00_00_00_ff_00_00, 0x80_80_80_80_80_80_80_80, 0x00_00_00_00_00_80_40_20, 0x04_08_10_20_40_80_00_00],
    [0x00_00_00_00_00_ff_00_00, 0x40_40_40_40_40_40_40_40, 0x00_00_00_00_80_40_20_10, 0x02_04_08_10_20_40_80_00],
    [0x00_00_00_00_00_ff_00_00, 0x20_20_20_20_20_20_20_20, 0x00_00_00_80_40_20_10_08, 0x01_02_04_08_10_20_40_80],
    [0x00_00_00_00_00_ff_00_00, 0x10_10_10_10_10_10_10_10, 0x00_00_80_40_20_10_08_04, 0x00_01_02_04_08_10_20_40],
    [0x00_00_00_00_00_ff_00_00, 0x08_08_08_08_08_08_08_08, 0x00_80_40_20_10_08_04_02, 0x00_00_01_02_04_08_10_20],
    [0x00_00_00_00_00_ff_00_00, 0x04_04_04_04_04_04_04_04, 0x80_40_20_10_08_04_02_01, 0x00_00_00_01_02_04_08_10],
    [0x00_00_00_00_00_ff_00_00, 0x02_02_02_02_02_02_02_02, 0x40_20_10_08_04_02_01_00, 0x00_00_00_00_01_02_04_08],
    [0x00_00_00_00_00_ff_00_00, 0x01_01_01_01_01_01_01_01, 0x20_10_08_04_02_01_00_00, 0x00_00_00_00_00_01_02_04],
    [0x00_00_00_00_00_00_ff_00, 0x80_80_80_80_80_80_80_80, 0x00_00_00_00_00_00_80_40, 0x02_04_08_10_20_40_80_00],
    [0x00_00_00_00_00_00_ff_00, 0x40_40_40_40_40_40_40_40, 0x00_00_00_00_00_80_40_20, 0x01_02_04_08_10_20_40_80],
    [0x00_00_00_00_00_00_ff_00, 0x20_20_20_20_20_20_20_20, 0x00_00_00_00_80_40_20_10, 0x00_01_02_04_08_10_20_40],
    [0x00_00_00_00_00_00_ff_00, 0x10_10_10_10_10_10_10_10, 0x00_00_00_80_40_20_10_08, 0x00_00_01_02_04_08_10_20],
    [0x00_00_00_00_00_00_ff_00, 0x08_08_08_08_08_08_08_08, 0x00_00_80_40_20_10_08_04, 0x00_00_00_01_02_04_08_10],
    [0x00_00_00_00_00_00_ff_00, 0x04_04_04_04_04_04_04_04, 0x00_80_40_20_10_08_04_02, 0x00_00_00_00_01_02_04_08],
    [0x00_00_00_00_00_00_ff_00, 0x02_02_02_02_02_02_02_02, 0x80_40_20_10_08_04_02_01, 0x00_00_00_00_00_01_02_04],
    [0x00_00_00_00_00_00_ff_00, 0x01_01_01_01_01_01_01_01, 0x40_20_10_08_04_02_01_00, 0x00_00_00_00_00_00_01_02],
    [0x00_00_00_00_00_00_00_ff, 0x80_80_80_80_80_80_80_80, 0x00_00_00_00_00_00_00_80, 0x01_02_04_08_10_20_40_80],
    [0x00_00_00_00_00_00_00_ff, 0x40_40_40_40_40_40_40_40, 0x00_00_00_00_00_00_80_40, 0x00_01_02_04_08_10_20_40],
    [0x00_00_00_00_00_00_00_ff, 0x20_20_20_20_20_20_20_20, 0x00_00_00_00_00_80_40_20, 0x00_00_01_02_04_08_10_20],
    [0x00_00_00_00_00_00_00_ff, 0x10_10_10_10_10_10_10_10, 0x00_00_00_00_80_40_20_10, 0x00_00_00_01_02_04_08_10],
    [0x00_00_00_00_00_00_00_ff, 0x08_08_08_08_08_08_08_08, 0x00_00_00_80_40_20_10_08, 0x00_00_00_00_01_02_04_08],
    [0x00_00_00_00_00_00_00_ff, 0x04_04_04_04_04_04_04_04, 0x00_00_80_40_20_10_08_04, 0x00_00_00_00_00_01_02_04],
    [0x00_00_00_00_00_00_00_ff, 0x02_02_02_02_02_02_02_02, 0x00_80_40_20_10_08_04_02, 0x00_00_00_00_00_00_01_02],
    [0x00_00_00_00_00_00_00_ff, 0x01_01_01_01_01_01_01_01, 0x80_40_20_10_08_04_02_01, 0x00_00_00_00_00_00_00_01]
];

/// An array containing outflank information for an extracted ray.
pub const OUTFLANK : [[u8; 64]; 8] =[
    [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01
    ], [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01
    ], [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81
    ], [
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01,
    0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41,
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01,
    0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81, 0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81
    ], [
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x20, 0x20, 0x22, 0x21, 0x20, 0x20, 0x22, 0x21,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x40, 0x40, 0x42, 0x41, 0x40, 0x40, 0x42, 0x41,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x20, 0x20, 0x22, 0x21, 0x20, 0x20, 0x22, 0x21,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x80, 0x80, 0x82, 0x81, 0x80, 0x80, 0x82, 0x81
    ], [
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x20, 0x21, 0x20, 0x21,
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x40, 0x41, 0x40, 0x41,
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x20, 0x21, 0x20, 0x21,
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x80, 0x81, 0x80, 0x81
    ], [
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x20, 0x20,
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x40, 0x40,
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x20, 0x20,
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x80, 0x80
    ], [
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40,
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x80
    ]
];

/// An array containing flip information given a specific outflank. Works on extracted lines.
pub const FLIP : [[u8;256]; 8] = [
    [
    0x00, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x60, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x78, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x3c, 0x3e, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x7c, 0x7e, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x3c, 0x3e, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x3e, 0x3e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x7e, 0x7e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x3e, 0x3e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00
    ], [
    0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x3f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x7f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x3f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00
    ]
];

/// Contains indexing information that takes a coordinate and produces x and y values for the move
/// making function.
pub const INDEXING: [(usize, usize, usize, usize); 64] = [
    (0x00, 0x00, 0x00, 0x07), (0x01, 0x00, 0x01, 0x06),
    (0x02, 0x00, 0x02, 0x05), (0x03, 0x00, 0x03, 0x04),
    (0x04, 0x00, 0x04, 0x03), (0x05, 0x00, 0x05, 0x02),
    (0x06, 0x00, 0x06, 0x01), (0x07, 0x00, 0x07, 0x00),
    (0x00, 0x01, 0x01, 0x07), (0x01, 0x01, 0x01, 0x06),
    (0x02, 0x01, 0x02, 0x05), (0x03, 0x01, 0x03, 0x04),
    (0x04, 0x01, 0x04, 0x03), (0x05, 0x01, 0x05, 0x02),
    (0x06, 0x01, 0x06, 0x01), (0x07, 0x01, 0x07, 0x01),
    (0x00, 0x02, 0x02, 0x07), (0x01, 0x02, 0x02, 0x06),
    (0x02, 0x02, 0x02, 0x05), (0x03, 0x02, 0x03, 0x04),
    (0x04, 0x02, 0x04, 0x03), (0x05, 0x02, 0x05, 0x02),
    (0x06, 0x02, 0x06, 0x02), (0x07, 0x02, 0x07, 0x02),
    (0x00, 0x03, 0x03, 0x07), (0x01, 0x03, 0x03, 0x06),
    (0x02, 0x03, 0x03, 0x05), (0x03, 0x03, 0x03, 0x04),
    (0x04, 0x03, 0x04, 0x03), (0x05, 0x03, 0x05, 0x03),
    (0x06, 0x03, 0x06, 0x03), (0x07, 0x03, 0x07, 0x03),
    (0x00, 0x04, 0x04, 0x07), (0x01, 0x04, 0x04, 0x06),
    (0x02, 0x04, 0x04, 0x05), (0x03, 0x04, 0x04, 0x04),
    (0x04, 0x04, 0x04, 0x04), (0x05, 0x04, 0x05, 0x04),
    (0x06, 0x04, 0x06, 0x04), (0x07, 0x04, 0x07, 0x04),
    (0x00, 0x05, 0x05, 0x07), (0x01, 0x05, 0x05, 0x06),
    (0x02, 0x05, 0x05, 0x05), (0x03, 0x05, 0x05, 0x05),
    (0x04, 0x05, 0x05, 0x05), (0x05, 0x05, 0x05, 0x05),
    (0x06, 0x05, 0x06, 0x05), (0x07, 0x05, 0x07, 0x05),
    (0x00, 0x06, 0x06, 0x07), (0x01, 0x06, 0x06, 0x06),
    (0x02, 0x06, 0x06, 0x06), (0x03, 0x06, 0x06, 0x06),
    (0x04, 0x06, 0x06, 0x06), (0x05, 0x06, 0x06, 0x06),
    (0x06, 0x06, 0x06, 0x06), (0x07, 0x06, 0x07, 0x06),
    (0x00, 0x07, 0x07, 0x07), (0x01, 0x07, 0x07, 0x07),
    (0x02, 0x07, 0x07, 0x07), (0x03, 0x07, 0x07, 0x07),
    (0x04, 0x07, 0x07, 0x07), (0x05, 0x07, 0x07, 0x07),
    (0x06, 0x07, 0x07, 0x07), (0x07, 0x07, 0x07, 0x07)
];


/// A function which allows shifting a negative number of spots to the right.
/// # Arguments
/// * `x`: The number to shift.
/// * `shift`: The size of the shift, positive for right and negative for left.
pub fn directional_shift(x: u64, shift: i8) -> u64 {
    if shift < 0 {
        x << -shift
    } else {
        x >> shift
    }
}

/// A function which generates the moves in the specified direction using the given mask.
/// # Arguments:
/// * `player`: The bitboard representing the player's disks.
/// * `mask`: A bitmask containing the opponent's disks, excluding the wrapping locations.
/// * `dir`: The direction in which to shift (from SHIFT_DIRS).
pub fn directional_moves(player: u64, mask: u64, dir: i8) -> u64 {
    let mask_2 = mask & directional_shift(mask, dir);
    let mask_4 = mask_2 & directional_shift(mask_2, 2 * dir);

    let mut flip = player;
    flip |= mask & directional_shift(flip, dir);
    flip |= mask_2 & directional_shift(flip, dir * 2);
    flip |= mask_4 & directional_shift(flip, dir * 4);

    directional_shift(flip & mask, dir)
}

/// A function which generates all moves a given player can make against the given opponent.
/// # Arguments:
/// * `player`: The bitboard representing the player's disks.
/// * `opponent`: The bitboard representing the opponent's disks.
pub fn all_moves(player: u64, opponent: u64) -> u64 {
    let mut all_moves: u64 = 0;

    let masked = opponent & !(FILE_A | FILE_H);

    all_moves |= directional_moves(player, opponent, 8);
    all_moves |= directional_moves(player, opponent, -8);
    all_moves |= directional_moves(player, masked, 1);
    all_moves |= directional_moves(player, masked, -1);
    all_moves |= directional_moves(player, masked, 7);
    all_moves |= directional_moves(player, masked, -7);
    all_moves |= directional_moves(player, masked, 9);
    all_moves |= directional_moves(player, masked, -9);

    all_moves & !(player | opponent)
}

#[cfg(all(target_arch="x86_64", target_feature="bmi2"))]
/// A function which generates a mask representing all of the disks that will be flipped when the
/// given move is made. Panics if pos > 63.
/// # Arguments:
/// * `pos`: The position of the move being made.
/// * `player`: The bitboard representing the player's disks.
/// * `opponent`: The bitboard representing the opponent's disks.
/// # Returns:
/// * A mask of the disks flipped when the given move is made.
pub fn get_flip(pos: usize, player: u64, opponent: u64) -> u64 {
    let masks = EXTRACT_RAYS[pos];
    const NOT_EDGES_H : u64 = !0x81_81_81_81_81_81_81_81;
    const NOT_EDGES_V : u64 = !0xFF_00_00_00_00_00_00_FF;
    const NOT_EDGES_D : u64 = !0xFF_81_81_81_81_81_81_FF;

    let ph: u64 = unsafe { _pext_u64(player, masks[0]) };
    let pv: u64 = unsafe { _pext_u64(player, masks[1]) };
    let pd: u64 = unsafe { _pext_u64(player, masks[2]) };
    let pa: u64 = unsafe { _pext_u64(player, masks[3]) };

    let oh: u64 = unsafe { _pext_u64(opponent, masks[0] & NOT_EDGES_H) };
    let ov: u64 = unsafe { _pext_u64(opponent, masks[1] & NOT_EDGES_V) };
    let od: u64 = unsafe { _pext_u64(opponent, masks[2] & NOT_EDGES_D) };
    let oa: u64 = unsafe { _pext_u64(opponent, masks[3] & NOT_EDGES_D) };

    let (x, y, x2, y2) = INDEXING[pos];

    let fh = FLIP[x][(OUTFLANK[x][oh as usize] & ph as u8) as usize];
    let fv = FLIP[y][(OUTFLANK[y][ov as usize] & pv as u8) as usize];
    let fd = FLIP[x2][(OUTFLANK[x2][od as usize] & pd as u8) as usize];
    let fa = FLIP[y2][(OUTFLANK[y2][oa as usize] & pa as u8) as usize];

    let mh = unsafe { _pdep_u64(fh as u64, masks[0]) };
    let mv = unsafe { _pdep_u64(fv as u64, masks[1]) };
    let md = unsafe { _pdep_u64(fd as u64, masks[2]) };
    let ma = unsafe { _pdep_u64(fa as u64, masks[3]) };

    (mh | mv | md | ma) as u64
}

#[cfg(all(target_arch="x86", target_feature="bmi2"))]
/// A function which generates a mask representing all of the disks that will be flipped when the
/// given move is made. Panics if pos > 63.
/// # Arguments:
/// * `pos`: The position of the move being made.
/// * `player`: The bitboard representing the player's disks.
/// * `opponent`: The bitboard representing the opponent's disks.
/// # Returns:
/// * A mask of the disks flipped when the given move is made.
pub fn get_flip(pos: usize, player: u64, opponent: u64) -> u64 {
    let masks = EXTRACT_RAYS[pos];
    const NOT_EDGES_H: u64 = !0x81_81_81_81_81_81_81_81;
    const NOT_EDGES_V: u64 = !0xFF_00_00_00_00_00_00_FF;
    const NOT_EDGES_D: u64 = !0xFF_81_81_81_81_81_81_FF;

    let ph0 = unsafe { _pext_u32(player as u32, masks[0] as u32) as u64 };
    let pv0 = unsafe { _pext_u32(player as u32, masks[1] as u32) as u64 };
    let pd0 = unsafe { _pext_u32(player as u32, masks[2] as u32) as u64 };
    let pa0 = unsafe { _pext_u32(player as u32, masks[3] as u32) as u64 };

    let ph1 = unsafe { _pext_u32((player >> 32) as u32, (masks[0] >> 32) as u32) as u64 };
    let pv1 = unsafe { _pext_u32((player >> 32) as u32, (masks[1] >> 32) as u32) as u64 };
    let pd1 = unsafe { _pext_u32((player >> 32) as u32, (masks[2] >> 32) as u32) as u64 };
    let pa1 = unsafe { _pext_u32((player >> 32) as u32, (masks[3] >> 32) as u32) as u64 };

    let oh0 = unsafe { _pext_u32(opponent as u32, (masks[0] & NOT_EDGES_H) as u32) as u64 };
    let ov0 = unsafe { _pext_u32(opponent as u32, (masks[1] & NOT_EDGES_V) as u32) as u64 };
    let od0 = unsafe { _pext_u32(opponent as u32, (masks[2] & NOT_EDGES_D) as u32) as u64 };
    let oa0 = unsafe { _pext_u32(opponent as u32, (masks[3] & NOT_EDGES_D) as u32) as u64 };

    let oh1 = unsafe { _pext_u32((opponent >> 32) as u32, ((masks[0] & NOT_EDGES_H) >> 32) as u32) as u64 };
    let ov1 = unsafe { _pext_u32((opponent >> 32) as u32, ((masks[1] & NOT_EDGES_V) >> 32) as u32) as u64 };
    let od1 = unsafe { _pext_u32((opponent >> 32) as u32, ((masks[2] & NOT_EDGES_D) >> 32) as u32) as u64 };
    let oa1 = unsafe { _pext_u32((opponent >> 32) as u32, ((masks[3] & NOT_EDGES_D) >> 32) as u32) as u64 };

    let (x, y, x2, y2) = INDEXING[pos];

    const SHIFTS_P: [u64; 15] = [0,0,0,0,1,2,3,4,4,4,4,4,3,2,1];
    const SHIFTS_O: [u64; 15] = [0,0,0,0,0,1,2,3,3,3,3,2,1,0,0];

    let ph: u64 = ph0 | ph1;
    let pv: u64 = pv0 | (pv1 << 4);
    let pd: u64 = pd0 | (pd1 << SHIFTS_P[7 - x + y]);
    let pa: u64 = pa0 | (pa1 << SHIFTS_P[x + y]);

    let oh: u64 = oh0 | oh1;
    let ov: u64 = ov0 | (ov1 << 3);
    let od: u64 = od0 | (od1 << SHIFTS_O[7 - x + y]);
    let oa: u64 = oa0 | (oa1 << SHIFTS_O[x + y]);

    let fh = FLIP[x][(OUTFLANK[x][oh as usize] & ph as u8) as usize];
    let fv = FLIP[y][(OUTFLANK[y][ov as usize] & pv as u8) as usize];
    let fd = FLIP[x2][(OUTFLANK[x2][od as usize] & pd as u8) as usize];
    let fa = FLIP[y2][(OUTFLANK[y2][oa as usize] & pa as u8) as usize];

    let mh0 = unsafe { _pdep_u32(fh as u32, masks[0] as u32) as u64 };
    let mv0 = unsafe { _pdep_u32(fv as u32, masks[1] as u32) as u64 };
    let md0 = unsafe { _pdep_u32(fd as u32, masks[2] as u32) as u64 };
    let ma0 = unsafe { _pdep_u32(fa as u32, masks[3] as u32) as u64 };

    let mh1 = unsafe { _pdep_u32(fh as u32,                                 (masks[0] >> 32) as u32) as u64 };
    let mv1 = unsafe { _pdep_u32((fv as u64 >> 4) as u32,                   (masks[1] >> 32) as u32) as u64 };
    let md1 = unsafe { _pdep_u32((fd as u64 >> SHIFTS_P[7 - x + y]) as u32, (masks[2] >> 32) as u32) as u64 };
    let ma1 = unsafe { _pdep_u32((fa as u64 >> SHIFTS_P[x + y]) as u32,     (masks[3] >> 32) as u32) as u64 };

    (mh0 | mv0 | md0 | ma0  |  (mh1 << 32) | (mv1 << 32) | (md1 << 32) | (ma1 << 32)) as u64
}

#[cfg(not(target_feature="bmi2"))]
/// A function which generates a mask representing all of the disks that will be flipped when the
/// given move is made. Panics if pos > 63.
/// # Arguments:
/// * `pos`: The position of the move being made.
/// * `player`: The bitboard representing the player's disks.
/// * `opponent`: The bitboard representing the opponent's disks.
/// # Returns:
/// * A mask of the disks flipped when the given move is made.
pub fn get_flip(pos: usize, player: u64, opponent: u64) -> u64 {
    let disk = 0x80_00_00_00_00_00_00_00 >> pos;
    let mut flood = 0;
    let player = player | disk;
    for i in 0..SHIFT_DIRS.len() {
        let shift = SHIFT_DIRS[i];
        let prop = opponent & SHIFT_MASKS[i] & SHIFT_RAYS[pos][i];
        let mut temp_flood = 0;

        let mut gen = disk;
        let mut next = gen;
        while gen != 0 {
            temp_flood |= gen;
            next = directional_shift(gen, shift);
            gen = next & prop;
        }

        if next & player != 0 {
            flood |= temp_flood ^ disk;
        }
    }

    flood | disk
}

#[cfg(test)]
mod test {
    #[test]
    fn test_directional_shift() {
        let x = 0x00_00_00_13_57_00_00_00;

        assert_eq!(super::directional_shift(x,  1), x >> 1);
        assert_eq!(super::directional_shift(x, -1), x << 1);
    }

    #[test]
    fn test_directional_moves() {
        let player = 0x00_0C_04_04_86_04_02_00;
        let opponent = 0x38_01_FB_7B_39_1B_1D_3C;

        let results: [u64; 8] = [
            0x00_02_02_00_02_00_00_00, 0x00_00_00_08_08_08_0A_0C,
            0x00_00_F0_F6_70_30_38_00, 0x00_00_01_01_00_01_00_00,
            0x00_72_30_10_00_00_00_00, 0x00_11_21_00_00_00_00_00,
            0x00_00_00_30_70_72_34_38, 0x00_00_00_01_01_00_01_00 ];

        let tests: Vec<(i8, u64, u64)> = (0..8).map(|i| (
            super::SHIFT_DIRS[i], super::SHIFT_MASKS[i], results[i])
        ).collect();

        for (shift, mask, result) in tests {
            assert_eq!(super::directional_moves(player, opponent & mask, shift), result);
        }
    }

    #[test]
    fn test_all_moves() {
        let player = 0x00_0C_04_04_86_04_02_00;
        let opponent = 0x38_01_FB_7B_39_1B_1D_3C;

        assert_eq!(super::all_moves(player, opponent), 0x00_72_00_80_40_60_20_00);
    }
}
