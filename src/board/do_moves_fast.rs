use bitintr::x86::bmi2::{pdep, pext};
use ::board;

// The code here is based off of
// https://github.com/Tenebryo/coin

const LINES : [[u64; 4]; 64] = [
    [0xff00000000000000, 0x8080808080808080, 0x8040201008040201, 0x8000000000000000],
    [0xff00000000000000, 0x4040404040404040, 0x4020100804020100, 0x4080000000000000],
    [0xff00000000000000, 0x2020202020202020, 0x2010080402010000, 0x2040800000000000],
    [0xff00000000000000, 0x1010101010101010, 0x1008040201000000, 0x1020408000000000],
    [0xff00000000000000, 0x0808080808080808, 0x0804020100000000, 0x0810204080000000],
    [0xff00000000000000, 0x0404040404040404, 0x0402010000000000, 0x0408102040800000],
    [0xff00000000000000, 0x0202020202020202, 0x0201000000000000, 0x0204081020408000],
    [0xff00000000000000, 0x0101010101010101, 0x0100000000000000, 0x0102040810204080],
    [0x00ff000000000000, 0x8080808080808080, 0x0080402010080402, 0x4080000000000000],
    [0x00ff000000000000, 0x4040404040404040, 0x8040201008040201, 0x2040800000000000],
    [0x00ff000000000000, 0x2020202020202020, 0x4020100804020100, 0x1020408000000000],
    [0x00ff000000000000, 0x1010101010101010, 0x2010080402010000, 0x0810204080000000],
    [0x00ff000000000000, 0x0808080808080808, 0x1008040201000000, 0x0408102040800000],
    [0x00ff000000000000, 0x0404040404040404, 0x0804020100000000, 0x0204081020408000],
    [0x00ff000000000000, 0x0202020202020202, 0x0402010000000000, 0x0102040810204080],
    [0x00ff000000000000, 0x0101010101010101, 0x0201000000000000, 0x0001020408102040],
    [0x0000ff0000000000, 0x8080808080808080, 0x0000804020100804, 0x2040800000000000],
    [0x0000ff0000000000, 0x4040404040404040, 0x0080402010080402, 0x1020408000000000],
    [0x0000ff0000000000, 0x2020202020202020, 0x8040201008040201, 0x0810204080000000],
    [0x0000ff0000000000, 0x1010101010101010, 0x4020100804020100, 0x0408102040800000],
    [0x0000ff0000000000, 0x0808080808080808, 0x2010080402010000, 0x0204081020408000],
    [0x0000ff0000000000, 0x0404040404040404, 0x1008040201000000, 0x0102040810204080],
    [0x0000ff0000000000, 0x0202020202020202, 0x0804020100000000, 0x0001020408102040],
    [0x0000ff0000000000, 0x0101010101010101, 0x0402010000000000, 0x0000010204081020],
    [0x000000ff00000000, 0x8080808080808080, 0x0000008040201008, 0x1020408000000000],
    [0x000000ff00000000, 0x4040404040404040, 0x0000804020100804, 0x0810204080000000],
    [0x000000ff00000000, 0x2020202020202020, 0x0080402010080402, 0x0408102040800000],
    [0x000000ff00000000, 0x1010101010101010, 0x8040201008040201, 0x0204081020408000],
    [0x000000ff00000000, 0x0808080808080808, 0x4020100804020100, 0x0102040810204080],
    [0x000000ff00000000, 0x0404040404040404, 0x2010080402010000, 0x0001020408102040],
    [0x000000ff00000000, 0x0202020202020202, 0x1008040201000000, 0x0000010204081020],
    [0x000000ff00000000, 0x0101010101010101, 0x0804020100000000, 0x0000000102040810],
    [0x00000000ff000000, 0x8080808080808080, 0x0000000080402010, 0x0810204080000000],
    [0x00000000ff000000, 0x4040404040404040, 0x0000008040201008, 0x0408102040800000],
    [0x00000000ff000000, 0x2020202020202020, 0x0000804020100804, 0x0204081020408000],
    [0x00000000ff000000, 0x1010101010101010, 0x0080402010080402, 0x0102040810204080],
    [0x00000000ff000000, 0x0808080808080808, 0x8040201008040201, 0x0001020408102040],
    [0x00000000ff000000, 0x0404040404040404, 0x4020100804020100, 0x0000010204081020],
    [0x00000000ff000000, 0x0202020202020202, 0x2010080402010000, 0x0000000102040810],
    [0x00000000ff000000, 0x0101010101010101, 0x1008040201000000, 0x0000000001020408],
    [0x0000000000ff0000, 0x8080808080808080, 0x0000000000804020, 0x0408102040800000],
    [0x0000000000ff0000, 0x4040404040404040, 0x0000000080402010, 0x0204081020408000],
    [0x0000000000ff0000, 0x2020202020202020, 0x0000008040201008, 0x0102040810204080],
    [0x0000000000ff0000, 0x1010101010101010, 0x0000804020100804, 0x0001020408102040],
    [0x0000000000ff0000, 0x0808080808080808, 0x0080402010080402, 0x0000010204081020],
    [0x0000000000ff0000, 0x0404040404040404, 0x8040201008040201, 0x0000000102040810],
    [0x0000000000ff0000, 0x0202020202020202, 0x4020100804020100, 0x0000000001020408],
    [0x0000000000ff0000, 0x0101010101010101, 0x2010080402010000, 0x0000000000010204],
    [0x000000000000ff00, 0x8080808080808080, 0x0000000000008040, 0x0204081020408000],
    [0x000000000000ff00, 0x4040404040404040, 0x0000000000804020, 0x0102040810204080],
    [0x000000000000ff00, 0x2020202020202020, 0x0000000080402010, 0x0001020408102040],
    [0x000000000000ff00, 0x1010101010101010, 0x0000008040201008, 0x0000010204081020],
    [0x000000000000ff00, 0x0808080808080808, 0x0000804020100804, 0x0000000102040810],
    [0x000000000000ff00, 0x0404040404040404, 0x0080402010080402, 0x0000000001020408],
    [0x000000000000ff00, 0x0202020202020202, 0x8040201008040201, 0x0000000000010204],
    [0x000000000000ff00, 0x0101010101010101, 0x4020100804020100, 0x0000000000000102],
    [0x00000000000000ff, 0x8080808080808080, 0x0000000000000080, 0x0102040810204080],
    [0x00000000000000ff, 0x4040404040404040, 0x0000000000008040, 0x0001020408102040],
    [0x00000000000000ff, 0x2020202020202020, 0x0000000000804020, 0x0000010204081020],
    [0x00000000000000ff, 0x1010101010101010, 0x0000000080402010, 0x0000000102040810],
    [0x00000000000000ff, 0x0808080808080808, 0x0000008040201008, 0x0000000001020408],
    [0x00000000000000ff, 0x0404040404040404, 0x0000804020100804, 0x0000000000010204],
    [0x00000000000000ff, 0x0202020202020202, 0x0080402010080402, 0x0000000000000102],
    [0x00000000000000ff, 0x0101010101010101, 0x8040201008040201, 0x0000000000000001]
];

const OUTFLANK : [[u8; 64]; 8] =[
    [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01
    ], [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01
    ], [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81
    ], [
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01,
    0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41,
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01,
    0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81, 0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81
    ], [
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x20, 0x20, 0x22, 0x21, 0x20, 0x20, 0x22, 0x21,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x40, 0x40, 0x42, 0x41, 0x40, 0x40, 0x42, 0x41,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x20, 0x20, 0x22, 0x21, 0x20, 0x20, 0x22, 0x21,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x01, 0x80, 0x80, 0x82, 0x81, 0x80, 0x80, 0x82, 0x81
    ], [
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x20, 0x21, 0x20, 0x21,
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x40, 0x41, 0x40, 0x41,
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x20, 0x21, 0x20, 0x21,
    0x00, 0x01, 0x00, 0x01, 0x10, 0x11, 0x10, 0x11, 0x00, 0x01, 0x00, 0x01, 0x80, 0x81, 0x80, 0x81
    ], [
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x20, 0x20,
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x40, 0x40,
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x20, 0x20,
    0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x80, 0x80
    ], [
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40,
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x20,
    0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x80
    ]
];

const FLIP : [[u8;256]; 8] = [
    [
    0x00, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x60, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x78, 0x7e, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x3e, 0x3c, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x0e, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x3c, 0x3e, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x7c, 0x7e, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x3c, 0x3e, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x1e, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0e, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00
    ], [
    0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x3e, 0x3e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x7e, 0x7e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x3e, 0x3e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x1e, 0x1e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
    0x0e, 0x0e, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00
    ], [
    0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x3f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x7f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x3f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x1f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00,
    0x0f, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x07, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00
    ]
];

const INDEXING: [(usize, usize, usize, usize); 64] = [
    (0x00, 0x00, 0x00, 0x07), (0x01, 0x00, 0x01, 0x06),
    (0x02, 0x00, 0x02, 0x05), (0x03, 0x00, 0x03, 0x04),
    (0x04, 0x00, 0x04, 0x03), (0x05, 0x00, 0x05, 0x02),
    (0x06, 0x00, 0x06, 0x01), (0x07, 0x00, 0x07, 0x00),
    (0x00, 0x01, 0x01, 0x07), (0x01, 0x01, 0x01, 0x06),
    (0x02, 0x01, 0x02, 0x05), (0x03, 0x01, 0x03, 0x04),
    (0x04, 0x01, 0x04, 0x03), (0x05, 0x01, 0x05, 0x02),
    (0x06, 0x01, 0x06, 0x01), (0x07, 0x01, 0x07, 0x01),
    (0x00, 0x02, 0x02, 0x07), (0x01, 0x02, 0x02, 0x06),
    (0x02, 0x02, 0x02, 0x05), (0x03, 0x02, 0x03, 0x04),
    (0x04, 0x02, 0x04, 0x03), (0x05, 0x02, 0x05, 0x02),
    (0x06, 0x02, 0x06, 0x02), (0x07, 0x02, 0x07, 0x02),
    (0x00, 0x03, 0x03, 0x07), (0x01, 0x03, 0x03, 0x06),
    (0x02, 0x03, 0x03, 0x05), (0x03, 0x03, 0x03, 0x04),
    (0x04, 0x03, 0x04, 0x03), (0x05, 0x03, 0x05, 0x03),
    (0x06, 0x03, 0x06, 0x03), (0x07, 0x03, 0x07, 0x03),
    (0x00, 0x04, 0x04, 0x07), (0x01, 0x04, 0x04, 0x06),
    (0x02, 0x04, 0x04, 0x05), (0x03, 0x04, 0x04, 0x04),
    (0x04, 0x04, 0x04, 0x04), (0x05, 0x04, 0x05, 0x04),
    (0x06, 0x04, 0x06, 0x04), (0x07, 0x04, 0x07, 0x04),
    (0x00, 0x05, 0x05, 0x07), (0x01, 0x05, 0x05, 0x06),
    (0x02, 0x05, 0x05, 0x05), (0x03, 0x05, 0x05, 0x05),
    (0x04, 0x05, 0x05, 0x05), (0x05, 0x05, 0x05, 0x05),
    (0x06, 0x05, 0x06, 0x05), (0x07, 0x05, 0x07, 0x05),
    (0x00, 0x06, 0x06, 0x07), (0x01, 0x06, 0x06, 0x06),
    (0x02, 0x06, 0x06, 0x06), (0x03, 0x06, 0x06, 0x06),
    (0x04, 0x06, 0x06, 0x06), (0x05, 0x06, 0x06, 0x06),
    (0x06, 0x06, 0x06, 0x06), (0x07, 0x06, 0x07, 0x06),
    (0x00, 0x07, 0x07, 0x07), (0x01, 0x07, 0x07, 0x07),
    (0x02, 0x07, 0x07, 0x07), (0x03, 0x07, 0x07, 0x07),
    (0x04, 0x07, 0x07, 0x07), (0x05, 0x07, 0x07, 0x07),
    (0x06, 0x07, 0x07, 0x07), (0x07, 0x07, 0x07, 0x07)
];

#[cfg(target_arch = "x86_64")]
pub fn do_move_no_asm(pos: usize, p: u64, o: u64) -> u64 {
    let masks = LINES[pos];
    const NOT_EDGES_H : u64 = !0x8181818181818181;
    const NOT_EDGES_V : u64 = !0xFF000000000000FF;
    const NOT_EDGES_D : u64 = !0xFF818181818181FF;

    let ph: u64 = pext(p, masks[0]);
    let pv: u64 = pext(p, masks[1]);
    let pd: u64 = pext(p, masks[2]);
    let pa: u64 = pext(p, masks[3]);

    let oh: u64 = pext(o, masks[0] & NOT_EDGES_H);
    let ov: u64 = pext(o, masks[1] & NOT_EDGES_V);
    let od: u64 = pext(o, masks[2] & NOT_EDGES_D);
    let oa: u64 = pext(o, masks[3] & NOT_EDGES_D);

    let (x, y, x2, y2) = INDEXING[pos];

    let fh = FLIP[x][(OUTFLANK[x][oh as usize] & ph as u8) as usize];
    let fv = FLIP[y][(OUTFLANK[y][ov as usize] & pv as u8) as usize];
    let fd = FLIP[x2][(OUTFLANK[x2][od as usize] & pd as u8) as usize];
    let fa = FLIP[y2][(OUTFLANK[y2][oa as usize] & pa as u8) as usize];

    let mh = pdep(fh as u64, masks[0]);
    let mv = pdep(fv as u64, masks[1]);
    let md = pdep(fd as u64, masks[2]);
    let ma = pdep(fa as u64, masks[3]);

    (mh | mv | md | ma) as u64
}

#[cfg(target_arch = "x86")]
pub fn do_move_no_asm(pos: usize, p: u64, o: u64) -> u64 {
    let masks = LINES[pos];
    const NOT_EDGES_H: u64 = !0x8181818181818181;
    const NOT_EDGES_V: u64 = !0xFF000000000000FF;
    const NOT_EDGES_D: u64 = !0xFF818181818181FF;

    let ph0 = pext(p as u32, masks[0] as u32) as u64;
    let pv0 = pext(p as u32, masks[1] as u32) as u64;
    let pd0 = pext(p as u32, masks[2] as u32) as u64;
    let pa0 = pext(p as u32, masks[3] as u32) as u64;

    let ph1 = pext((p >> 32) as u32, (masks[0] >> 32) as u32) as u64;
    let pv1 = pext((p >> 32) as u32, (masks[1] >> 32) as u32) as u64;
    let pd1 = pext((p >> 32) as u32, (masks[2] >> 32) as u32) as u64;
    let pa1 = pext((p >> 32) as u32, (masks[3] >> 32) as u32) as u64;

    let oh0 = pext(o as u32, (masks[0] & NOT_EDGES_H) as u32) as u64;
    let ov0 = pext(o as u32, (masks[1] & NOT_EDGES_V) as u32) as u64;
    let od0 = pext(o as u32, (masks[2] & NOT_EDGES_D) as u32) as u64;
    let oa0 = pext(o as u32, (masks[3] & NOT_EDGES_D) as u32) as u64;

    let oh1 = pext((o >> 32) as u32, ((masks[0] & NOT_EDGES_H) >> 32) as u32) as u64;
    let ov1 = pext((o >> 32) as u32, ((masks[1] & NOT_EDGES_V) >> 32) as u32) as u64;
    let od1 = pext((o >> 32) as u32, ((masks[2] & NOT_EDGES_D) >> 32) as u32) as u64;
    let oa1 = pext((o >> 32) as u32, ((masks[3] & NOT_EDGES_D) >> 32) as u32) as u64;

    let (x, y, x2, y2) = INDEXING[pos];

    const SHIFTS_P : [u64; 15] = [1,2,3,4,4,4,4,4,3,2,1,0,0,0,0];

    const SHIFTS_O : [u64; 15] = [0,0,1,2,3,3,3,3,2,1,0,0,0,0,0];

    let ph: u64 = ph0 | ph1;
    let pv: u64 = pv0 | (pv1 << 4);
    let pd: u64 = pd0 | (pd1 << SHIFTS_P[7 - x + y]);
    let pa: u64 = pa0 | (pa1 << SHIFTS_P[x + y]);

    let oh: u64 = oh0 | oh1;
    let ov: u64 = ov0 | (ov1 << 3);
    let od: u64 = od0 | (od1 << SHIFTS_O[7 - x + y]);
    let oa: u64 = oa0 | (oa1 << SHIFTS_O[x + y]);

    let fh = FLIP[x][(OUTFLANK[x][oh as usize] & ph as u8) as usize];
    let fv = FLIP[y][(OUTFLANK[y][ov as usize] & pv as u8) as usize];
    let fd = FLIP[x2][(OUTFLANK[x2][od as usize] & pd as u8) as usize];
    let fa = FLIP[y2][(OUTFLANK[y2][oa as usize] & pa as u8) as usize];

    let mh0 = pdep(fh as u32, masks[0] as u32) as u64;
    let mv0 = pdep(fv as u32, masks[1] as u32) as u64;
    let md0 = pdep(fd as u32, masks[2] as u32) as u64;
    let ma0 = pdep(fa as u32, masks[3] as u32) as u64;

    let mh1 = pdep(fh as u32,                                   (masks[0] >> 32) as u32) as u64;
    let mv1 = pdep((fv as u64 >> 4) as u32,                     (masks[1] >> 32) as u32) as u64;
    let md1 = pdep((fd as u64 >> SHIFTS_P[7 - x + y]) as u32,   (masks[2] >> 32) as u32) as u64;
    let ma1 = pdep((fa as u64 >> SHIFTS_P[x + y]) as u32,       (masks[3] >> 32) as u32) as u64;

    (mh0 | mv0 | md0 | ma0  |  (mh1 << 32) | (mv1 << 32) | (md1 << 32) | (ma1 << 32)) as u64
}
